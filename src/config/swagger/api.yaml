openapi: '3.0.0'
info:
  title: Social Networking app Api
  description: Social Networking app Api description
  version: 1.0
  contact:
    email: mujhassan786@gmail.com
  servers:
    -url: http://localhost:4000
    description: THis is my local Server
    -url: http://example.com/
    description: This is my original URL
  apis: ['./src/routes/*.ts']
  
tags:
  name: Users
  description: The users management API
  name: Posts
  description: The Posts management API

components:
  schemas:
    user:
      type: object
      required:
      - name
      - email
      - password
      properties:
        id:
          type: string
          description: Auto generated id of the user
        name:
          type: string
        email:
          type: string
        password:
          type: string
        userRole:
          type: string
        tokens:
          type: Array
        generateWebToken:
          type: any
      example:
        _id: 632d93f4d3b3252c967e3317
        name: jon2
        email: jon2@gmail.com
        userRole: Member
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 
  security:
   - bearerAuth: []  
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid

paths:
  /v1/users/sign_up:
    post:
      description: Sign up for the app
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example: {name: 'Tester', email: Tester@testing.com, password: '12345'}
      responses:
        '200':
          description: The user was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '409':
            description: This user already exists


  /v1/users/sign_in:
    post:
      description: Sign in to the app
      tags: [Users]
      requestBody:
        required: true
        content:
            application/json:
                schema:
                    type: object
                    example: {email: Tester@testing.com, password: '12345'}
      responses:
        '200':
            description: The user signed In successfully
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/user'


  /v1/users/{id}/follow:
    post:
      description: Follow a user
      tags: [Users]
      parameters:
        - in: path
          name: id
      responses:
        '200':
            description: The user is followed successfully
            content:
                application/json:
                    schema:
                      example: {"follower": "633d50d8f80ecb94f1038804","followee": "633d462f378b326c96067834","_id": "6345e1a8e63286983d246c7a","createdAt": "2022-10-11T21:35:36.939Z","updatedAt": "2022-10-11T21:35:36.939Z", "__v": 0}
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []

  /v1/users/{id}/unfollow:
    post:
      description: Unfollow a user
      tags: [Users]
      parameters:
        - in: path
          name: id
      responses:
        '200':
            description: The user is unfollowed successfully
            content:
                application/json:
                    schema:
                      example: {"follower": "633d50d8f80ecb94f1038804","followee": "633d462f378b326c96067834","_id": "6345e1a8e63286983d246c7a","createdAt": "2022-10-11T21:35:36.939Z","updatedAt": "2022-10-11T21:35:36.939Z", "__v": 0}
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []

  /v1/posts:
    post:
      description: Create a new Post
      tags: [Posts]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example: {description: 'description 101'}
      responses:
        '200':
          description: New post created by the user
          schema: 
          type: array
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []

    get:
      description: Get User Posts
      tags: [Posts]
      responses:
        '200':
            description: List of posts created by the user
            schema: 
            type: array
        '401':
            $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []

  /v1/posts/{id}/share:
    post:
      description: Share a Post
      tags: [Posts]
      parameters:
        - in: path
          name: id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example: {description: 'Shared post with description 101'}
      responses:
        '200':
            description: Post shared by the user
            schema: 
            type: array
        '401':
            $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []
  
  /v1/posts/feed?page=1&limit=2:
    get:
      description: Get user feed posts
      tags: [Posts]
      parameters:
        - name: page
          in: query
        - name: limit
          in: query
      responses:
        '200':
          description: All posts belonging to the user feed
          schema: 
          type: array
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []